import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/**
 * https://developer.aliyun.com/article/953691
 * https://kevcodez.de/posts/2018-08-19-test-coverage-in-kotlin-with-jacoco/
 * https://github.com/mapstruct/mapstruct-examples/blob/main/mapstruct-kotlin-gradle/build.gradle.kts
 * https://www.appsloveworld.com/kotlin/100/25/mapstruct-not-autowiring-with-kotlin-and-spring-boot-built-using-gradle
 **/

/*
    buildscript代码块中的声明是gradle脚本自身需要的资源。
    可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
    gradle在执行脚本时，会优先执行buildscript代码块中的内容，然后才会执行剩余的build脚本。
    该部分代码应该置顶
*/
buildscript {
    ext {
        mybatisMapperVersion = '3.5.11'
        mybatisStringStartVersion = '3.0.1'
        mybatisGeneratorVersion = '1.4.1'
        mariadbConnectorJavaVersion = '3.1.0'
        springCloudDependencies = '2022.0.0'
        cloudTencentDependencies = '1.8.2-2022.0.0'
        mapstructVersion = '1.5.3.Final'
        mariadbConnectorJavaVersion = '3.1.0'
        springBootVersion = '3.0.1'
        kotlinVersion = '1.7.22'
    }

    repositories {
        mavenLocal()
        maven {
            name "腾讯云镜像"
            url "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/"
        }
        maven {
            name "阿里云镜像"
            url "https://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven {
            name "华为开源镜像库"
            url "https://mirrors.huaweicloud.com/repository/maven/"
        }
        mavenCentral()
    }
    dependencies {
        /* 添加插件依赖路径（通过jar方式） */
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.graalvm.buildtools.native' version '0.9.18'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id "org.jetbrains.kotlin.kapt" version '1.7.22'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.graalvm.buildtools.native'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.kapt'

    //这个插件用于发布jar包到私服
    apply plugin: 'maven-publish'

    group "dev.yidafu.pan"

    repositories {
        mavenLocal()
        maven {
            name "腾讯云镜像"
            url "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/"
        }
        maven {
            name "阿里云镜像"
            url "https://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven {
            name "华为开源镜像库"
            url "https://mirrors.huaweicloud.com/repository/maven/"
        }
        mavenCentral()
    }

    /**
     * 导入了springboot,spring cloud的pom文件，能够免去自己管理版本
     * PS: 在Spring官网指导上面有另外一种配置，那种配置需要配置main class，一会说明*/
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependencies}"
            mavenBom "com.tencent.cloud:spring-cloud-tencent-dependencies:${cloudTencentDependencies}"
        }
    }


    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, "minutes"
    }

}

/* 所有子项目的通用配置 */
subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.graalvm.buildtools.native'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.kapt'

    group = 'dev.yidafu.pan'
    version = '0.0.1-SNAPSHOT'
    /* 指定jdk版本 */
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    /* java编译的时候缺省状态下会因为中文字符而失败 */
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        maven {
            name "腾讯云镜像"
            url "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/"
        }
        maven {
            name "阿里云镜像"
            url "https://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven {
            name "华为开源镜像库"
            url "https://mirrors.huaweicloud.com/repository/maven/"
        }
        mavenCentral()
    }

    /* 添加通用依赖 */
    dependencies {
        /**
         * kotlin 依赖
         */
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

        /**
         * spring 相关依赖
         */
        implementation 'org.springframework.boot:spring-boot-starter-web'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
        kapt 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
        implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        // mapstruct
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        kapt "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
        implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: mariadbConnectorJavaVersion
        // https://mvnrepository.com/artifact/org.mybatis/mybatis
        implementation group: 'org.mybatis', name: 'mybatis', version: mybatisMapperVersion
        // https://mvnrepository.com/artifact/org.mybatis.dynamic-sql/mybatis-dynamic-sql
        implementation group: 'org.mybatis.dynamic-sql', name: 'mybatis-dynamic-sql', version: mybatisGeneratorVersion
        // https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core
        implementation group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: mybatisGeneratorVersion
        // https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
        implementation group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: mybatisStringStartVersion

        /**
         * cloud 相关配置
         */
        // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-bootstrap
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        // https://mvnrepository.com/artifact/com.tencent.cloud/spring-cloud-starter-tencent-polaris-discovery
        implementation 'com.tencent.cloud:spring-cloud-starter-tencent-polaris-discovery'
//        implementation 'org.springframework.cloud:spring-cloud-starter-zookeeper-discovery'

    }

    kapt {
        arguments {
//            keepJavacAnnotationProcessors = true
            // Set Mapstruct Configuration options here
            // https://kotlinlang.org/docs/reference/kapt.html#annotation-processor-arguments
            // https://mapstruct.org/documentation/stable/reference/html/#configuration-options
             arg("mapstruct.defaultComponentModel", "spring")
        }
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '17'
        }
    }

    test.finalizedBy(jacocoTestReport)

    jacoco {
        // You may modify the Jacoco version here
        toolVersion = "0.8.8"
    }

    jacocoTestReport {
        // Adjust the output of the test report
        reports {
            xml.enabled true
            html.enabled true
        }
    }


    test {
        useJUnitPlatform()

        jacoco {
            destinationFile = file("${buildDir}/jacoco/test.exec")
        }
    }

// https://cwlab.hatenablog.jp/entry/2019/12/18/233216


    configurations {
        mybatisGenerator
    }

    dependencies {
        mybatisGenerator group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: mybatisGeneratorVersion
        mybatisGenerator group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: mariadbConnectorJavaVersion
//    mybatisGenerator group: 'tk.mybatis', name: 'mapper', version: mybatisMapperVersion
    }


    task mybatisGenerator {
        doLast {
            ant.taskdef(name: 'mbgenerator', classname: 'org.mybatis.generator.ant.GeneratorAntTask', classpath: configurations.mybatisGenerator.asPath)
            ant.mbgenerator(overwrite: true, configfile: 'src/main/resources/generatorConfig.xml', verbose: true)
        }
    }
}

